package Thread;
class Counter {
    private int count = 0;

    // Synchronized method to ensure only one thread can access it at a time
    public synchronized void increment() {
        count++;
    }

    public int getCount() {
        return count;
    }
}

class Worker extends Thread {
    private Counter counter;

    public Worker(Counter counter) {
        this.counter = counter;
    }

    @Override
    public void run() {
        for (int i = 0; i < 1000; i++) {
            counter.increment();
        }
    }
}

public class SyncDemo {
    
    public static void main(String[] args) 

    throws InterruptedException {
        Counter counter = new Counter();

        Worker thread1 = new Worker(counter);
        Worker thread2 = new Worker(counter);

        thread1.start();
        thread2.start();

        thread1.join(); // Wait for thread1 to finish
        thread2.join(); // Wait for thread2 to finish

        System.out.println("Final count: " + counter.getCount()); // Should print 2000
    }
}
